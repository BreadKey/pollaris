# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: pollaris-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: 20201221
  region: ap-northeast-2
  environment:
    host: ${self:custom.secret.db.host}
    port: ${self:custom.secret.db.port}
    user: ${self:custom.secret.db.user}
    password: ${self:custom.secret.db.password}
    database: ${self:custom.secret.db.database}
    encrypt: ${self:custom.secret.db.encrypt}
    salt: ${self:custom.secret.salt}
    jwtKey: ${self:custom.secret.jwt.key}
    jwtAlgorithm: ${self:custom.secret.jwt.algorithm}
  
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.py'
#    - '!exclude-me-dir/**'
#    - include-me.py
#    - include-me-dir/**
package:
  patterns:
    - '!client.py'
    - '!secret/**'
    - '!test/**'
    - '!*.sql'

functions:
  signUp:
    handler: handler.auth.signUp
    events:
      - http:
          path: signUp
          method: post

  signIn:
    handler: handler.auth.signIn
    events:
      - http:
          path: signIn
          method: post

  getAuthConstraints:
    handler: handler.auth.getConstraints
    events:
      - http:
          path: auth/constraints
          method: get

  authorizeUser:
    handler: handler.auth.authorizeUser

  requestVerificationCode:
    handler: handler.auth.requestVerificationCode
    events:
      - http:
          path: auth/verification
          method: get
          authorizer: authorizeUser
          request:
            parameters:
              querystrings:
                userId: true
                phoneNumber: true

  verifyIdentity:
    handler: handler.auth.verifyIdentity
    events:
      - http:
          path: auth/verification
          method: post
          authorizer: authorizeUser

  authorizeVerifiedUser:
    handler: handler.auth.authorizeVerifiedUser
    
  registerIdentity:
    handler: handler.auth.registerIdentity
    events:
      - http:
          path: auth/identity
          method: post
          authorizer: authorizeVerifiedUser

  getNewIdentityChallenge:
    handler: handler.auth.getNewIdentityChallenge
    events:
      - http:
          path: auth/challenge
          method: get
          authorizer: authorizeVerifiedUser
          request:
            parameters:
              querystrings:
                userId: true

  authorizeWithIdentity:
    handler: handler.auth.authorizeWithIdentity

  createPoll:
    handler: handler.poll.create
    events:
      - http:
          path: poll
          method: post
          authorizer: authorizeUser

  getPollConstraints:
    handler: handler.poll.getConstraints
    events:
      - http:
          path: poll/constraints
          method: get

  answer:
    handler: handler.poll.answer
    events:
      - http:
          path: answer
          method: post
          authorizer: 
            name: authorizeWithIdentity
            resultTtlInSeconds: 0
  page:
    handler: handler.poll.page
    events:
      - http:
          path: poll
          method: get
          authorizer: authorizeUser
          request:
            parameters:
              querystrings:
                from: true
                count: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-offline
custom:
  customDomain:
    domainName: ${self:custom.secret.domain}
    basePath: ${self:custom.secret.basePath}
    stage: ${self:provider.stage}
    createRoute53Record: true
  pythonRequirements:
    dockerizePip: non-linux
  secret: ${file(./secret/${self:provider.stage}.json)}